na_if("") %>% filter(!is.na(sample)) %>%
mutate(year = year(date)) %>%
mutate(season = season(x = date, lang = 'en'))
# Create phyloseq object
#Read in the env't data
env <- read.csv("env_data/env_data.csv") %>%
mutate(site = str_sub(sample, start = -1)) %>%
mutate(date = as.Date(date, format = "%d/%m/%Y")) %>%
na_if("") %>% filter(!is.na(sample)) %>% filter(!is.na(date)) %>%
mutate(year = year(date)) %>%
mutate(season = season(x = date, lang = 'en'))
getSeason <- function(DATES) {
WS <- as.Date("2012-12-15", format = "%Y-%m-%d") # Winter Solstice
SE <- as.Date("2012-3-15",  format = "%Y-%m-%d") # Spring Equinox
SS <- as.Date("2012-6-15",  format = "%Y-%m-%d") # Summer Solstice
FE <- as.Date("2012-9-15",  format = "%Y-%m-%d") # Fall Equinox
# Convert dates from any year to 2012 dates
d <- as.Date(strftime(DATES, format="2012-%m-%d"))
ifelse (d >= WS | d < SE, "Winter",
ifelse (d >= SE & d < SS, "Spring",
ifelse (d >= SS & d < FE, "Summer", "Fall")))
}
env <- read.csv("env_data/env_data.csv") %>%
mutate(site = str_sub(sample, start = -1)) %>%
mutate(date = as.Date(date, format = "%d/%m/%Y")) %>%
na_if("") %>% filter(!is.na(sample)) %>% filter(!is.na(date)) %>%
mutate(year = year(date)) %>%
mutate(season = getSeason(date))
nmds_df <- data.frame(NMDS1 = nmds$points[,1], NMDS2 = nmds$points[,2]) %>%
rownames_to_column('sample_ID') %>%
dplyr::left_join(., env, by = 'sample_ID') %>%
mutate(month = month(date))
nmds_df <- data.frame(NMDS1 = nmds$points[,1], NMDS2 = nmds$points[,2]) %>%
rownames_to_column('sample') %>%
dplyr::left_join(., env, by = 'sample') %>%
mutate(month = month(date))
ggplot(nmds_df, aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = site)) +
theme_bw()
nmds_df %>%
filter(site == 'A') %>%
ggplot(., aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = year)) +
theme_bw()
nmds_df %>%
filter(site == 'A') %>%
ggplot(., aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = season)) +
theme_bw()
ggplot(nmds_df, aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = season)) +
theme_bw()
write_csv(nmds_df, 'nmdsforinsp.csv')
library(lunar)
?lunar.4phases
?lunar::lunar.phase()
env <- read.csv("env_data/env_data.csv") %>%
mutate(site = str_sub(sample, start = -1)) %>%
mutate(date = as.Date(date, format = "%d/%m/%Y")) %>%
na_if("") %>% filter(!is.na(sample)) %>% filter(!is.na(date)) %>%
mutate(year = year(date)) %>%
mutate(season = getSeason(date)) %>%
mutate(phase = lunar.phase(date))
View(env)
rownames(env) <- env$sample_ID
#And make the phyloseq object
ps <- phyloseq(otu_table(seqtabNochim, taxa_are_rows = FALSE),
sample_data(env),
tax_table(taxa))
# Remove zeros
ps.otu.table.no.zero <- ps.otu.table[rowSums(ps.otu.table[])>0,]
# Rarefy to lowest seq depth
ps.otu.table.rare <- rrarefy(ps.otu.table.no.zero, min(rowSums(ps.otu.table.no.zero)))
env <- read.csv("env_data/env_data.csv") %>%
mutate(site = str_sub(sample, start = -1)) %>%
mutate(date = as.Date(date, format = "%d/%m/%Y")) %>%
na_if("") %>% filter(!is.na(sample)) %>% filter(!is.na(date)) %>%
mutate(year = year(date)) %>%
mutate(season = getSeason(date)) %>%
mutate(phase = lunar.phase(date))
rownames(env) <- env$sample_ID
#And make the phyloseq object
ps <- phyloseq(otu_table(seqtabNochim, taxa_are_rows = FALSE),
sample_data(env),
tax_table(taxa))
#And make the phyloseq object
ps <- phyloseq(otu_table(seqtabNochim, taxa_are_rows = FALSE),
# sample_data(env),
tax_table(taxa))
ps@sam_data = sample_data(env)
ps.otu.table <- data.frame(otu_table(ps))
# Remove zeros
ps.otu.table.no.zero <- ps.otu.table[rowSums(ps.otu.table[])>0,]
# Rarefy to lowest seq depth
ps.otu.table.rare <- rrarefy(ps.otu.table.no.zero, min(rowSums(ps.otu.table.no.zero)))
# Remove empty columns after rarefaction
ps.otu.table.rare.zero <- data.frame(ps.otu.table.rare[, which(colSums(ps.otu.table.rare) != 0)])
# Create an NMDS
nmds <- metaMDS(vegdist(ps.otu.table.rare.zero))
nmds_df <- data.frame(NMDS1 = nmds$points[,1], NMDS2 = nmds$points[,2]) %>%
rownames_to_column('sample') %>%
dplyr::left_join(., env, by = 'sample') %>%
mutate(month = month(date))
ggplot(nmds_df, aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = phase)) +
theme_bw()
nmds_df %>%
filter(site == 'A') %>%
ggplot(., aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = phase)) +
theme_bw()
lunar.metric.mean(as.Date("01/01/2020")
lunar.metric.mean(as.Date("01/01/2020"))
lunar.metric.mean(as.Date("01/01/2020"))
env <- read.csv("env_data/env_data.csv") %>%
mutate(site = str_sub(sample, start = -1)) %>%
mutate(date = as.Date(date, format = "%d/%m/%Y")) %>%
na_if("") %>% filter(!is.na(sample)) %>% filter(!is.na(date)) %>%
mutate(year = year(date)) %>%
mutate(season = getSeason(date)) %>%
mutate(phase = lunar.phase(date, name = 8))
env
rownames(env) <- env$sample_ID
#And make the phyloseq object
ps <- phyloseq(otu_table(seqtabNochim, taxa_are_rows = FALSE),
# sample_data(env),
tax_table(taxa))
ps@sam_data = sample_data(env)
ps.otu.table <- data.frame(otu_table(ps))
# Remove zeros
ps.otu.table.no.zero <- ps.otu.table[rowSums(ps.otu.table[])>0,]
# Rarefy to lowest seq depth
ps.otu.table.rare <- rrarefy(ps.otu.table.no.zero, min(rowSums(ps.otu.table.no.zero)))
# Remove empty columns after rarefaction
ps.otu.table.rare.zero <- data.frame(ps.otu.table.rare[, which(colSums(ps.otu.table.rare) != 0)])
# Create an NMDS
nmds <- metaMDS(vegdist(ps.otu.table.rare.zero))
nmds_df <- data.frame(NMDS1 = nmds$points[,1], NMDS2 = nmds$points[,2]) %>%
rownames_to_column('sample') %>%
dplyr::left_join(., env, by = 'sample') %>%
mutate(month = month(date))
ggplot(nmds_df, aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = phase)) +
theme_bw()
nmds_df %>%
filter(site == 'A') %>%
ggplot(., aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = phase)) +
theme_bw()
ggplot(nmds_df, aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = phase)) +
theme_bw()
ggplot(nmds_df, aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = phase, shape = site)) +
theme_bw()
ggplot(nmds_df, aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = site)) +
theme_bw()
asv_seqs <- colnames(seqtab.nochim)
asv_seqs <- colnames(seqtabNochim)
asv_headers <- vector(dim(seqtabNochim)[2], mode="character")
for (i in 1:dim(seqtabNochim)[2]) {
asv_headers[i] <- paste(">ASV", i, sep="_")
}
asv_fasta <- c(rbind(asv_headers, asv_seqs))
write(asv_fasta, str_c(dada2_dir, "ASVs.fa"))
write(asv_fasta, "output/ASVs.fa")
asv_fasta
asv_tab <- t(seqtabNochim)
row.names(asv_tab) <- sub(">", "", asv_headers)
write.table(asv_tab, "output/ASVs_counts.tsv", sep="\t", quote=F, col.names=NA)
# tax table
asv_tax <- taxa
row.names(asv_tax) <- sub(">", "", asv_headers)
write.table(asv_tax, "output/ASVs_taxonomy.tsv", sep = "\t", quote=F, col.names=NA)
# merge asv abundance and taxonomy into one file
OTU_TAX_table <- merge(asv_tab, asv_tax, by=0)
write.table(OTU_TAX_table, "output/OTU_TAX_table.tsv", sep = "\t", quote=F, col.names=NA)
asv_tax
asv_tab
OTU_TAX_table
asv_headers
asv_fasta
OTU_TAX_table
asv_tab
asv_tax
asv_tab
OTU_TAX_table
row.names(OTU_TAX_table) <- sub(">", "", asv_headers)
OTU_TAX_table
write.table(OTU_TAX_table, "output/OTU_TAX_table.tsv", sep = "\t", quote=F, col.names=NA)
asv_tax
install.packages("ggpicrust2")
library(ggpicrust)
library(ggpicrust2)
# VIS
library(ggpicrust2)
# VIS
library(ggpicrust2)
# VIS
install.packages("ggpicrust2")
if (!requireNamespace("BiocManager", quietly = TRUE))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c(
"ALDEx2", "DESeq2", "edgeR", "limma", "Maaslin2", "metagenomeSeq",
"SummarizedExperiment", "phyloseq", "biomformat", "lefser"
))
df
df <- fread("/Users/johanvandenhoogen/SPUN/richness_maps/data/20230428_AM_predObs_sampled.csv")
df
df %>% ggplot(aes(x = arbuscular_mycorrhizal_richness, y = arbuscular_mycorrhizal_richness_Ensemble_mean)) +
geom_point()
df %>% ggplot(aes(x = arbuscular_mycorrhizal_richness, y = arbuscular_mycorrhizal_richness_Ensemble_mean)) +
geom_point() +
geom_abline()
df %>% ggplot(aes(x = arbuscular_mycorrhizal_richness, y = arbuscular_mycorrhizal_richness_Ensemble_mean)) +
geom_point() +
geom_abline() +
geom_smooth()
library(data.table)
library(tidyverse)
library(RColorBrewer)
setwd('/Users/johanvandenhoogen/SPUN/richness_maps')
# Define palette
paletteForUse <- c('#d10000', '#ff6622', '#ffda21', '#33dd00', '#1133cc', '#220066', '#330044')
colors <-  colorRampPalette(paletteForUse)(256)
df <- fread('data/20230428_AM_predObs_sampled.csv')
df
df$dens <- col2rgb(densCols(df[['arbuscular_mycorrhizal_richness']], df[['arbuscular_mycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = arbuscular_mycorrhizal_richness, y = arbuscular_mycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted AMF Richness", x = "Observed AMF Richness")
df <- fread('data/20230428_EM_predObs_sampled.csv')
df <- fread('data/20230428_EM_predObs_sampled.csv')
df$dens <- col2rgb(densCols(df[['ectomycorrhizal_richness']], df[['ectomycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df <- fread('data/20230428_EM_predObs_sampled_woProject.csv')
df$dens <- col2rgb(densCols(df[['ectomycorrhizal_richness']], df[['ectomycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df$dens <- col2rgb(densCols(df[['ectomycorrhizal_richness']], df[['ectomycorrhizal_richness_Predicted']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Predicted)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df <- fread('data/20230428_EM_predObs_sampled_woProject.csv') %>%
mutate(ectomycorrhizal_richness_Ensemble_mean = exp(ectomycorrhizal_richness_Predicted)-1)
df$dens <- col2rgb(densCols(df[['ectomycorrhizal_richness']], df[['ectomycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df <- fread('data/20230428_EM_predObs_sampled.csv')
df$dens <- col2rgb(densCols(df[['ectomycorrhizal_richness']], df[['ectomycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
library(data.table)
library(tidyverse)
library(RColorBrewer)
setwd('/Users/johanvandenhoogen/SPUN/richness_maps')
# Define palette
paletteForUse <- c('#d10000', '#ff6622', '#ffda21', '#33dd00', '#1133cc', '#220066', '#330044')
colors <-  colorRampPalette(paletteForUse)(256)
df <- fread('data/20230428_AM_predObs_sampled.csv')
df
df$dens <- col2rgb(densCols(df[['arbuscular_mycorrhizal_richness']], df[['arbuscular_mycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = arbuscular_mycorrhizal_richness, y = arbuscular_mycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted AMF Richness", x = "Observed AMF Richness")
df %>%
ggplot(aes(x = arbuscular_mycorrhizal_richness, y = arbuscular_mycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted AMF Richness", x = "Observed AMF Richness")
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df <- fread('data/20230428_AM_predObs_sampled.csv')
df
df$dens <- col2rgb(densCols(df[['arbuscular_mycorrhizal_richness']], df[['arbuscular_mycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = arbuscular_mycorrhizal_richness, y = arbuscular_mycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted AMF Richness", x = "Observed AMF Richness")
df <- fread('data/20230428_EM_predObs_sampled.csv')
df$dens <- col2rgb(densCols(df[['ectomycorrhizal_richness']], df[['ectomycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df %>%
ggplot(aes(x = arbuscular_mycorrhizal_richness, y = arbuscular_mycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted AMF Richness", x = "Observed AMF Richness")
library(data.table)
library(tidyverse)
library(RColorBrewer)
setwd('/Users/johanvandenhoogen/SPUN/richness_maps')
# Define palette
paletteForUse <- c('#d10000', '#ff6622', '#ffda21', '#33dd00', '#1133cc', '#220066', '#330044')
colors <-  colorRampPalette(paletteForUse)(256)
df <- fread('data/20230428_AM_predObs_sampled.csv')
df
df$dens <- col2rgb(densCols(df[['arbuscular_mycorrhizal_richness']], df[['arbuscular_mycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = arbuscular_mycorrhizal_richness, y = arbuscular_mycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted AMF Richness", x = "Observed AMF Richness")
df <- fread('data/20230428_EM_predObs_sampled.csv')
df$dens <- col2rgb(densCols(df[['ectomycorrhizal_richness']], df[['ectomycorrhizal_richness_Ensemble_mean']]))[1,] + 1L
# Map densities to colors
df$colors = colors[df$dens]
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted EMF Richness", x = "Observed EMF Richness")
df %>%
ggplot(aes(x = ectomycorrhizal_richness, y = ectomycorrhizal_richness_Ensemble_mean)) +
geom_point(color = df$colors) +
scale_color_manual(values = rev(brewer.pal(6, "Paired"))) +
geom_abline(linetype = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x', color = 'black', lwd = 0.5, se = F) +
xlim(c(0, 600)) +
ylim(c(0, 600)) +
# scale_x_log10() + scale_y_log10() +
theme_classic() +
theme(legend.position = "none",
aspect.ratio = 1) +
labs(y = "Predicted ECM Richness", x = "Observed ECM Richness")
