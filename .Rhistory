axis.label.size = 3,
group.point.size = 3,
grid.label.size = 3,
)
shinyApp(
#   ui <- bootstrapPage(
#   tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
#
#   leafletOutput("map", width = "50%"),
#
#   # absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
#   #               draggable = F, top = "auto", left = 60, right = "auto", bottom = "60",
#   #               width = 250, height = "auto",
#   #
#   #               p("Data sources:"),
#   #
#   #               p("UHI, population: ", a("CIESIN, 2016", href = "https://doi.org/10.7927/H4H70CRF"), style = "font-size:12px"),
#   #
#   #               p("Precipitation: ", a("MERRA", href = "https://disc.gsfc.nasa.gov/daac-bin/FTPSubset2.pl)"), style = "font-size:12px"),
#   #
#   #               p("Green cover, Europe: ", a("Eurostat", href = "https://ec.europa.eu/eurostat/statistics-explained/index.php/Urban_Europe_-_statistics_on_cities,_towns_and_suburbs_-_green_cities#Further_Eurostat_information"), style = "font-size:12px"),
#   #
#   #               p("Green cover, SEA: ", a("Richards et al. 2017", href = "https://doi.org/10.1016/j.landurbplan.2016.09.005"), style = "font-size:12px")
#   # )
# ),
ui <- fluidPage(column(7, leafletOutput("map", height = "400px")),
column(5, plotOutput("plot", height = "400px"))
),
server <- function(input, output) {
# pal <- colorFactor(
#   palette = c("#002BFF", "#1A66FF", "#3399FF", "#66CCFF", "#99EEFF", "#CCFFFF", "#FFFFCC", "#FFEE99", "#FFCC66", "#FF9933", "#FF661A", "#FF2B00"),
#   domain = cities_display$levels)
#
# Render map
output$map <- renderLeaflet({
leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(layerId = df$id,
stroke = FALSE,
fillOpacity = 0.5,
radius = 3,
# color = ~pal(cities_display$levels),
label = df$id)
})
# Get marker info
observeEvent(input$map_marker_click, {
output$marker <- renderPrint(input$map_marker_click$id)
})
# generate data in reactive
ggplot_data <- reactive({
selectedRow <- df %>% filter(id == input$map_marker_click$id)
selectedRow %>%
rbind(., refEco %>% filter(Resolve_Ecoregion == selectedRow$Resolve_Ecoregion), fill = TRUE) %>%
select(id, all_of(bands))
})
output$plot <- renderPlot({
ggplot_data() %>% ggradar(fill = TRUE,
fill.alpha = 0.2,
legend.text.size = 9,
legend.position = "bottom",
group.colours = c('darkgreen', 'blue'),
axis.label.size = 3,
group.point.size = 3,
grid.label.size = 3,
)
})
}
)
library(devtools)
install_github('mcooper/moranfast')
devtools::load_all()
Sys.getenv("PATH")
devtools::load_all()
# library(devtools)
# install_github('mcooper/moranfast')
R.version
library(devtools)
install_github('mcooper/moranfast')
library(devtools)
install_github('mcooper/moranfast')
pkgbuild::check_build_tools(debug = TRUE)
options()
library(settings)
install.packages("settings")
library(settings)
reset(options)
library(devtools)
install_github('mcooper/moranfast')
options(buildtools.check = function(action) FALSE)
library(devtools)
install_github('mcooper/moranfast')
options(buildtools.check = function(action) TRUE)
install_github('mcooper/moranfast')
options(buildtools.check = function(action) FALSE)
install_github('mcooper/moranfast')
remove.packages("devtools", lib="/Library/Frameworks/R.framework/Versions/4.2/Resources/library")
install.packages("devtools")
library(devtools)
install_github('mcooper/moranfast')
options(buildtools.check = function(action) TRUE)
install_github('mcooper/moranfast')
remove.packages("AnomalyDetection", lib="~/Library/R/x86_64/4.2/library")
brms::brm()
options(buildtools.check = function(action) TRUE )
devtools::load_all()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install_github('mcooper/moranfast')
library(devtools)
install_github('mcooper/moranfast')
source("~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/40099076-4156-4ECA-A4EF-7585CC655BA1/moranfast_sf.R")
library(devtools)
install_github('mcooper/moranfast')
install_github('mcooper/moranfast')
install.packages(c("markdown", "packrat", "rsconnect"))
library(devtools)
install_github('mcooper/moranfast')
getOption("buildtools.check", NULL)
options(buildtools.check = function(action) TRUE)
getOption("buildtools.check", NULL)
library(devtools)
library(devtools)
install_github('mcooper/moranfast')
remove.packages("Rcpp", lib="~/Library/R/x86_64/4.2/library")
install_github('mcooper/moranfast')
install_github('mcooper/moranfast')
options(buildtools.check = function(action) NULL)
getOption("buildtools.check", NULL)
getOption("buildtools.check")
options(buildtools.check = function(action) TRUE)
getOption("buildtools.check")
library(devtools)
install_github('mcooper/moranfast')
library(devtools)
install_github('mcooper/moranfast')
library(devtools)
install_github('mcooper/moranfast')
install_github('mcooper/moranfast')
library(devtools)
install_github('mcooper/moranfast')
library(data.table)
library(tidyverse)
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/arbuscular_mycorrhizal_richness_training_data.csv') %>%
mutate(Guild = 'Arbuscular Mycorrhiza') %>%
select(Pixel_Lat, Pixel_Long, Guild) %>%
rbind(., fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/ectomycorrhizal_richness_training_data.csv') %>%
mutate(Guild = 'Ectomycorrhiza') %>%
select(Pixel_Lat, Pixel_Long, Guild))
ggplot() +
geom_polygon(data = map_data("world"),
aes(x = long, y = lat, group = group),
fill = "#bababa",
color = NA,
size = 0.1) +
coord_fixed(1.1) +
geom_point(data = df,
aes(x = Pixel_Long, y = Pixel_Lat, fill = Guild),
color = "black",
pch = 21
) +
# scale_fill_gradientn(colors = brewer.pal(8, "YlOrRd"),
#                      limits = c(0, 300),
#                      oob = scales::squish,
#                      name = "myco_diveristy") +
theme_minimal() +
theme(legend.position = "bottom",
legend.box="horizontal",
panel.grid = element_blank(),
axis.title=element_blank(),
axis.text=element_blank()) +
guides(fill = guide_colorbar(title.position = "top"))
ggplot() +
geom_polygon(data = map_data("world"),
aes(x = long, y = lat, group = group),
fill = "#bababa",
color = NA,
size = 0.1) +
coord_fixed(1.1) +
geom_point(data = df,
aes(x = Pixel_Long, y = Pixel_Lat, fill = Guild),
color = "black",
pch = 21
) +
# scale_fill_gradientn(colors = brewer.pal(8, "YlOrRd"),
#                      limits = c(0, 300),
#                      oob = scales::squish,
#                      name = "myco_diveristy") +
theme_minimal() +
theme(legend.position = "bottom",
legend.box="horizontal",
panel.grid = element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
ggplot() +
geom_polygon(data = map_data("world"),
aes(x = long, y = lat, group = group),
fill = "#bababa",
color = NA,
size = 0.1) +
coord_fixed(1.1) +
geom_point(data = df,
aes(x = Pixel_Long, y = Pixel_Lat, fill = Guild),
color = "black",
pch = 21
) +
# scale_fill_gradientn(colors = brewer.pal(8, "YlOrRd"),
#                      limits = c(0, 300),
#                      oob = scales::squish,
#                      name = "myco_diveristy") +
theme_minimal() +
theme(legend.position = "bottom",
legend.box="horizontal",
panel.grid = element_blank(),
axis.title=element_blank(),
axis.text=element_blank()) +
facet_wrap(vars(Guild))
ggplot() +
geom_polygon(data = map_data("world"),
aes(x = long, y = lat, group = group),
fill = "#bababa",
color = NA,
size = 0.1) +
coord_fixed(1.1) +
geom_point(data = df,
aes(x = Pixel_Long, y = Pixel_Lat, fill = Guild),
color = "black",
pch = 21
) +
# scale_fill_gradientn(colors = brewer.pal(8, "YlOrRd"),
#                      limits = c(0, 300),
#                      oob = scales::squish,
#                      name = "myco_diveristy") +
theme_minimal() +
theme(legend.position = "none",
legend.box="horizontal",
panel.grid = element_blank(),
axis.title=element_blank(),
axis.text=element_blank()) +
facet_wrap(vars(Guild))
library(data.table)
library(geosphere)
library(spatialRF)
library(patchwork)
# Set wd
setwd('/Users/johanvandenhoogen/SPUN/richness_maps')
# Empty list
list <- list()
# Distance matrix, calculate only once to speed things up
df <- fread('spatial_predictors/20230328_EM_predObs_forwardselected_spatialpredictors.csv') %>%
filter(number_of_spatialpredictors == 0) %>%
group_by(Pixel_Lat, Pixel_Long) %>%
filter(row_number()==1)
xy <- df[, c("Pixel_Long", "Pixel_Lat")]
distance.matrix = distm(xy)/1000
# Calculate Moran's I at different thresholds
for(num in seq(0,66)){
df <- fread('spatial_predictors/20230328_EM_predObs_forwardselected_spatialpredictors.csv') %>%
filter(number_of_spatialpredictors == num) %>%
group_by(Pixel_Lat, Pixel_Long) %>%
summarise(residuals = mean(residuals))
# Range of distances to test Moran's I
distance.thresholds <- c(5, 10, 50, 100, 150, 200, 300, 400, 500, 750, 1000)
out <- spatialRF::moran_multithreshold(
x = df$residuals,
distance.matrix = distance.matrix,
distance.threshold = distance.thresholds,
verbose = F
)
moransI <- out$per.distance %>%
mutate(number_of_spatialpredictors = num)
list[[num + 1]] <- moransI
}
list
list %>% bind_rows() %>%
mutate(p.value.binary = case_when(p.value >= 0.05 ~ "p >= 0.05",
p.value < 0.05 ~ "p < 0.05")) %>%
ggplot(aes(x = distance.threshold, y = moran.i)) +
geom_line() +
geom_point(aes(color = p.value.binary)) +
scale_color_manual(
breaks = c("p < 0.05", "p >= 0.05"),
values = c("red", "black")
) +
facet_wrap(vars(number_of_spatialpredictors), nrow = 7)
# Plot
list %>% bind_rows() %>%
mutate(p.value.binary = case_when(p.value >= 0.05 ~ "p >= 0.05",
p.value < 0.05 ~ "p < 0.05")) %>%
ggplot(aes(x = distance.threshold, y = moran.i)) +
geom_line() +
geom_point(aes(color = p.value.binary)) +
scale_color_manual(
breaks = c("p < 0.05", "p >= 0.05"),
values = c("red", "black")
) +
facet_wrap(vars(number_of_spatialpredictors), nrow = 7) +
geom_hline(yintercept = 0, linetype = 'dashed') +
theme_bw() +
xlab('Distance (km)') +
ylab("Moran's I") +
theme(legend.title=element_blank()) +
ggtitle('Number of Spatial Predictors - Ectomoycorrhizal')
library(data.table)
library(tidyverse)
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/output/SLOO_CV_AM.csv') %>%
group_by(buffer_size) %>%
summarise(lower = min(r2), upper = max(r2), mean = mean(r2))
df %>%
ggplot(aes(x = buffer_size/1000, y = mean)) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
geom_line() +
ylab("Coefficient of Determination R2") + xlab("Buffer Size (km)") +
theme_classic() +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
) +
ylim(c(0, 0.6)) +
geom_hline(aes(yintercept = 0), linetype = 2)
library(data.table)
library(tidyverse)
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/output/SLOO_CV_EM.csv') %>%
group_by(buffer_size) %>%
summarise(lower = min(r2), upper = max(r2), mean = mean(r2))
df %>%
ggplot(aes(x = buffer_size/1000, y = mean)) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
geom_line() +
ylab("Coefficient of Determination R2") + xlab("Buffer Size (km)") +
theme_classic() +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
) +
ylim(c(0, 0.6)) +
geom_hline(aes(yintercept = 0), linetype = 2)
library(data.table)
library(tidyverse)
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/output/SLOO_CV_AM.csv') %>%
group_by(buffer_size) %>%
summarise(lower = min(r2), upper = max(r2), mean = mean(r2)) %>%
mutate(Guild = 'Arbuscular Mycorrhizal') %>%
rbind(., fread('/Users/johanvandenhoogen/SPUN/richness_maps/output/SLOO_CV_EM.csv') %>%
group_by(buffer_size) %>%
summarise(lower = min(r2), upper = max(r2), mean = mean(r2)) %>%
mutate(Guild = 'Ectomycorrhizal'))
df %>%
ggplot(aes(x = buffer_size/1000, y = mean)) +
geom_ribbon(aes(ymin = lower, ymax = upper, group = Guild), alpha = 0.2) +
geom_line(aes(color = Guild)) +
ylab("Coefficient of Determination R2") + xlab("Buffer Size (km)") +
theme_classic() +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
) +
ylim(c(0, 0.6)) +
geom_hline(aes(yintercept = 0), linetype = 2) +
geom_smooth(aes(group = Guild), se = F, method = 'glm', formula = 'y ~ poly(x, 31)')
df %>%
ggplot(aes(x = buffer_size/1000, y = mean)) +
geom_ribbon(aes(ymin = lower, ymax = upper, group = Guild), alpha = 0.2) +
geom_line(aes(color = Guild)) +
ylab("Coefficient of Determination R2") + xlab("Buffer Size (km)") +
theme_classic() +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
) +
ylim(c(0, 0.6)) +
geom_hline(aes(yintercept = 0), linetype = 2)
ggsave(plot = plot, "bloo_cv.png")
plot <- df %>%
ggplot(aes(x = buffer_size/1000, y = mean)) +
geom_ribbon(aes(ymin = lower, ymax = upper, group = Guild), alpha = 0.2) +
geom_line(aes(color = Guild)) +
ylab("Coefficient of Determination R2") + xlab("Buffer Size (km)") +
theme_classic() +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
) +
ylim(c(0, 0.6)) +
geom_hline(aes(yintercept = 0), linetype = 2)
plot
ggsave(plot = plot, "bloo_cv.png")
library(data.table)
library(fuzzyjoin)
library(stringdist)
library(tidyverse)
`%notin%` <- Negate(`%in%`)
GADM <- fread('/Users/johanvandenhoogen/ETH/Projects/crop_yield/GADMexport.csv') %>%
select(starts_with('NAME_'))
GADM %>% head(10)
yield <- list.files(path = '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/', pattern = "*.csv", full.names = T) %>%
map_df(~fread(., header = TRUE)) %>%
select(-starts_with('1'), -starts_with('2')) %>%
rowid_to_column('id')
library(data.table)
library(fuzzyjoin)
library(stringdist)
library(tidyverse)
`%notin%` <- Negate(`%in%`)
GADM <- fread('/Users/johanvandenhoogen/ETH/Projects/crop_yield/GADMexport.csv') %>%
select(starts_with('NAME_'))
GADM %>% head(10)
yield <- list.files(path = '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/', pattern = "*.csv", full.names = T) %>%
map_df(~fread(., header = TRUE)) %>%
select(-starts_with('1'), -starts_with('2')) %>%
rowid_to_column('id')
# unique_countries <- unique_countries[1]
# Iterate over each country and perform fuzzy matching
for (country in unique_countries) {
# Filter GADM and yield data for the current country
gadm_country <- GADM %>%
filter(NAME_0 == country) %>%
select(-NAME_0) %>%
pivot_longer(everything(), values_to = 'NAME_GADM')
yield_country <- yield %>%
filter(Country == country) %>%
pivot_longer(!c(id, Country), values_to = 'NAME_yield') %>%
na_if("") %>%
filter(!is.na(NAME_yield))
# Perform fuzzy matching for the current country
matched_data <- stringdist_full_join(
yield_country,
gadm_country,
by = c(
"NAME_yield" = "NAME_GADM"
),
max_dist = 8, # Tune this parameter based on the desired level of matching accuracy
distance_col = "dist"
) %>%
group_by(NAME_yield) %>%
arrange(dist) %>%
filter(row_number()==1)
# Append matched data to the result dataframe
result <- rbind(result, matched_data)
}
GADM <- fread('/Users/johanvandenhoogen/ETH/Projects/crop_yield/GADMexport.csv') %>%
select(starts_with('NAME_'))
GADM %>% head(10)
yield <- list.files(path = '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/', pattern = "*.csv", full.names = T) %>%
map_df(~fread(., header = TRUE)) %>%
select(-starts_with('1'), -starts_with('2')) %>%
rowid_to_column('id')
yield <- list.files(path = '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/', pattern = "*.csv", full.names = T) %>%
map_df(~fread(., header = TRUE)) %>%
select(-starts_with('1'), -starts_with('2'))
View(yield)
yield <- list.files(path = '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/', pattern = "*.csv", full.names = T)
yield <- list.files(path = '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/', pattern = "*.csv", full.names = T)
yield <- list.files(path = '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/', pattern = "*.csv", full.names = T) %>%
map_df(~fread(., header = TRUE))
View(yield)
yield <- list.files(path = '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/yield/', pattern = "*.csv", full.names = T) %>%
map_df(~fread(., header = TRUE)) %>%
select(-starts_with('1'), -starts_with('2')) %>%
rowid_to_column('id')
fr <- yield %>%
pivot_longer(!c(id, Country), values_to = 'NAME_X') %>%
filter(Country == "France") %>%
na_if("") %>%
filter(!is.na(NAME_X))
# Create an empty dataframe to store results
result <- data.frame()
# Get unique country names from GADM dataset
unique_countries <- unique(GADM$NAME_0)
# unique_countries <- unique_countries[1]
# Iterate over each country and perform fuzzy matching
for (country in unique_countries) {
# Filter GADM and yield data for the current country
gadm_country <- GADM %>%
filter(NAME_0 == country) %>%
select(-NAME_0) %>%
pivot_longer(everything(), values_to = 'NAME_GADM')
yield_country <- yield %>%
filter(Country == country) %>%
pivot_longer(!c(id, Country), values_to = 'NAME_yield') %>%
na_if("") %>%
filter(!is.na(NAME_yield))
# Perform fuzzy matching for the current country
matched_data <- stringdist_full_join(
yield_country,
gadm_country,
by = c(
"NAME_yield" = "NAME_GADM"
),
max_dist = 8, # Tune this parameter based on the desired level of matching accuracy
distance_col = "dist"
) %>%
group_by(NAME_yield) %>%
arrange(dist) %>%
filter(row_number()==1)
# Append matched data to the result dataframe
result <- rbind(result, matched_data)
}
fwrite(matched_data, '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/matched_data_full.csv')
matched_data <- result %>% bind_rows()
fwrite(matched_data, '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/matched_data_full.csv')
top_hits <- matched_data %>% filter(!is.na(NAME_yield)) %>%
group_by(id) %>%
# filter(n()>1) %>%
arrange(id, dist) %>%
filter(!is.na(NAME_GADM)) %>%
slice(1)
fwrite(top_hits, '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/top_hits_matched.csv')
missing <- yield %>% filter(id %notin% top_hits$id)
missing
fwrite(missing, '/Users/johanvandenhoogen/ETH/Projects/crop_yield/data/missing.csv')
