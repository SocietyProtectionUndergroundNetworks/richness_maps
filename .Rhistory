#   group_by(year) %>%
#   summarise(pet = sum(value)) %>%
#   mutate(pet = pet/1e6)
restor_areas_biomes <- read_csv("restor_biomes_areas.csv") %>%
select(-'.geo', -'system:index', -area_ha, -public) %>%
rename(biome = biomes, siteId = id) %>%
mutate(siteId = as.character(siteId))
pet <- json_pet %>% unnest(c(xValues, yValues)) %>%
unnest(c(xValues, yValues)) %>%
rename(year = xValues, value = yValues) %>%
left_join(., restor_areas_biomes, by = c("siteId" = "siteId")) %>%
mutate(value = value*area_m2) %>%
select(-biome) %>%
group_by(year) %>%
summarise(pet = sum(value,na.rm=T)) %>%
mutate(pet = pet/1e15)
# NDVI plot
ndvi <- json_ndvi %>%
rowwise() %>%
filter(length(unlist(xValues)) > 0) %>%
unnest(c(xValues, yValues)) %>% unnest(c(xValues, yValues)) %>%
rename(year = xValues, value = yValues) %>%
group_by(year) %>%
summarise(ndvi = mean(value))
# Combine data
df <- left_join(ndvi, pet, by = "year") %>% left_join(., npp, by = "year") %>%
rename('Mean NDVI' = ndvi,
'Total NPP (tonnes C)' = npp,
'Total ET (B tonnes H2O)' = pet) %>%
pivot_longer(-year)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
title = "Restor Public Sites",
subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 140, height = 190)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
title = "Restor Public Sites",
subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 140, height = 190)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
# Combine data
df <- left_join(ndvi, pet, by = "year") %>% left_join(., npp, by = "year") %>%
rename('Mean NDVI' = ndvi,
'Total NPP (tonnes C)' = npp,
'Total ET (tonnes H2O)' = pet) %>%
pivot_longer(-year)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 180)
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
plot_trends
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
plot_trends
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
n
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
library(data.table)
library(tidyverse)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
library(data.table)
library(tidyverse)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
setwd('/Users/johanvandenhoogen/SPUN/richness_maps/')
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
library(data.table)
library(tidyverse)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
library(tidyverse)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv')
View(df)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, myco_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(myco_diversity - predicted))
# Quick plot
df %>%
ggplot(aes(x = myco_diversity, y = predicted)) +
geom_point() +
geom_smooth(formula = 'y~x', method = 'lm') +
geom_abline() +
xlim(c(0,180)) + ylim(c(0,180)) +
xlab("observed")
library(data.table)
library(randomForest)
install.packages("h2o")
library(h2o)
library(randomForest
library(randomForest)
library(randomForest)
?randomForest
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20211026_AMF_diversity_data_sampled.csv')
rf <- randomForest(myco_diversity ~ .,
data = df,
mtry = 3,
# importance = TRUE,
ntree = 250,
)
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20211026_AMF_diversity_data_sampled.csv') %>%
filter(!is.na(myco_diversity))
covariatelist <- c(	'CGIAR_PET',
'CHELSA_BIO_Annual_Mean_Temperature',
'CHELSA_BIO_Annual_Precipitation',
'CHELSA_BIO_Max_Temperature_of_Warmest_Month',
'CHELSA_BIO_Precipitation_Seasonality',
'ConsensusLandCover_Human_Development_Percentage',
'ConsensusLandCoverClass_Barren',
'ConsensusLandCoverClass_Deciduous_Broadleaf_Trees',
'ConsensusLandCoverClass_Evergreen_Broadleaf_Trees',
'ConsensusLandCoverClass_Evergreen_Deciduous_Needleleaf_Trees',
'ConsensusLandCoverClass_Herbaceous_Vegetation',
'ConsensusLandCoverClass_Mixed_Other_Trees',
'ConsensusLandCoverClass_Shrubs',
'EarthEnvTexture_CoOfVar_EVI',
'EarthEnvTexture_Correlation_EVI',
'EarthEnvTexture_Homogeneity_EVI',
'EarthEnvTopoMed_AspectCosine',
'EarthEnvTopoMed_AspectSine',
'EarthEnvTopoMed_Elevation',
'EarthEnvTopoMed_Slope',
'EarthEnvTopoMed_TopoPositionIndex',
'EsaCci_BurntAreasProbability',
'GHS_Population_Density',
'GlobBiomass_AboveGroundBiomass',
'GlobPermafrost_PermafrostExtent',
'MODIS_NPP',
'PelletierEtAl_SoilAndSedimentaryDepositThicknesses',
'SG_Depth_to_bedrock',
'SG_Sand_Content_005cm',
'SG_SOC_Content_005cm',
'SG_Soil_pH_H2O_005cm',)
covariatelist <- c(	'CGIAR_PET',
'CHELSA_BIO_Annual_Mean_Temperature',
'CHELSA_BIO_Annual_Precipitation',
'CHELSA_BIO_Max_Temperature_of_Warmest_Month',
'CHELSA_BIO_Precipitation_Seasonality',
'ConsensusLandCover_Human_Development_Percentage',
'ConsensusLandCoverClass_Barren',
'ConsensusLandCoverClass_Deciduous_Broadleaf_Trees',
'ConsensusLandCoverClass_Evergreen_Broadleaf_Trees',
'ConsensusLandCoverClass_Evergreen_Deciduous_Needleleaf_Trees',
'ConsensusLandCoverClass_Herbaceous_Vegetation',
'ConsensusLandCoverClass_Mixed_Other_Trees',
'ConsensusLandCoverClass_Shrubs',
'EarthEnvTexture_CoOfVar_EVI',
'EarthEnvTexture_Correlation_EVI',
'EarthEnvTexture_Homogeneity_EVI',
'EarthEnvTopoMed_AspectCosine',
'EarthEnvTopoMed_AspectSine',
'EarthEnvTopoMed_Elevation',
'EarthEnvTopoMed_Slope',
'EarthEnvTopoMed_TopoPositionIndex',
'EsaCci_BurntAreasProbability',
'GHS_Population_Density',
'GlobBiomass_AboveGroundBiomass',
'GlobPermafrost_PermafrostExtent',
'MODIS_NPP',
'PelletierEtAl_SoilAndSedimentaryDepositThicknesses',
'SG_Depth_to_bedrock',
'SG_Sand_Content_005cm',
'SG_SOC_Content_005cm',
'SG_Soil_pH_H2O_005cm')
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20211026_AMF_diversity_data_sampled.csv') %>%
select(myco_diversity, all_of(covariateList))
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20211026_AMF_diversity_data_sampled.csv') %>%
select(myco_diversity, all_of(covariatelist))
rf <- randomForest(myco_diversity ~ .,
data = df,
mtry = 3,
# importance = TRUE,
ntree = 250,
)
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20211026_AMF_diversity_data_sampled.csv') %>%
select(myco_diversity, all_of(covariatelist)) %>%
na.omit()
rf <- randomForest(myco_diversity ~ .,
data = df,
mtry = 3,
# importance = TRUE,
ntree = 250,
)
summary(rf)
rf <- randomForest(myco_diversity ~ .,
data = df,
mtry = 3,
# importance = TRUE,
ntree = 250,
random_state = 0)
?predict
mutate(predicted = predict(rf, newdata = df %>% select(all_of(covariatelist)))
df_wPredicted <- df %>%
mutate(predicted = predict(rf, newdata = df %>% select(all_of(covariatelist))))
df_wPredicted <- df %>%
mutate(predicted = predict(rf, newdata = df %>% select(all_of(covariatelist))))
View(df_wPredicted)
df_wPredicted %>%
rename(observed = myco_diversity) %>%
ggplot(aes(x = observed, y = predicted)) +
geom_poin()
df_wPredicted %>%
rename(observed = myco_diversity) %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point()
library(data.table)
library(tidyverse)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
# Quick plot
df %>%
ggplot(aes(x = AMF_diversity, y = predicted)) +
geom_point() +
geom_smooth(formula = 'y~x', method = 'lm') +
geom_abline() +
xlim(c(0,180)) + ylim(c(0,180)) +
xlab("observed")
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, myco_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(myco_diversity - predicted))
# Quick plot
df %>%
ggplot(aes(x = myco_diversity, y = predicted)) +
geom_point() +
geom_smooth(formula = 'y~x', method = 'lm') +
geom_abline() +
xlim(c(0,180)) + ylim(c(0,180)) +
xlab("observed")
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220324_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, myco_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(myco_diversity - predicted))
# Quick plot
df %>%
ggplot(aes(x = myco_diversity, y = predicted)) +
geom_point() +
geom_smooth(formula = 'y~x', method = 'lm') +
geom_abline() +
xlim(c(0,180)) + ylim(c(0,180)) +
xlab("observed")
