# # mutate(category = factor(category, levels = (.) %>% arrange(sum_public) %>% select(category) %>% distinct() %>% unlist())) %>%
mutate(
metadata = fct_relevel(metadata, "site_status", "pre_restoration", "intervention_type", "post_restoration"),
category = fct_reorder(category, count_public)
) %>%
filter(!is.na(category)) %>%
filter(count_public > 0) %>%
filter(category != "NA") %>%
ggplot(aes(x = category, y = count_public)) +
geom_segment(aes(x = category, xend = category, y = 0, yend = count_public, color = metadata)) +
geom_point(aes(color = metadata), size = 4, alpha = 0.6) +
theme_minimal(base_family = "Roboto Condensed") +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none"
) +
scale_y_continuous(expand = c(0.05, 0)) +
# facet_wrap(facets = vars(metadata), ncol = 1, scales = "free_y") +
facet_grid(rows = vars(metadata), scales = "free_y", switch = "y", space = "free_y", labeller = as_labeller(c(
"site_status" = "Site \nStatus",
"pre_restoration" = "Pre-restoration \nLand Use",
"intervention_type" = "Intervention Type",
"post_restoration" = "Post-restoration \nLand Cover"
))) +
labs(
# title = "Restor Public Sites",
# subtitle = "Number of sites",
y = "Number of sites", x = "") +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.y = element_text(angle = 270, face = "bold"),
strip.placement = "outside",
axis.title.x = element_text(margin = margin(t = 0.5, b = 0.5, unit = "cm")),
axis.title.y = element_blank(),
axis.text = element_text(size = 10),
legend.position = "none",
panel.grid.major.y = element_blank(),
)
plot_bars
ggsave(filename = "fig_2c.pdf", plot = plot_bars, dpi = 300, units = "mm", width = 140, height = 190)
plot_histogram <- df %>%
filter(!is.na(bins)) %>%
ggplot(aes(x = bins)) +
geom_histogram(stat = "count", fill = "grey", color = "black") +
scale_x_discrete(labels = c(expression ("0 - 10"~m^2),
expression ("10 - 100"~m^2),
expression ("100 - 1000"~m^2),
"0.1 - 1 Ha",
"1 - 10 Ha",
"10 - 100 Ha",
"100 - 1000 Ha",
"1000 - 10000 Ha",
"> 10.000 Ha")) +
scale_y_continuous(breaks = seq(0, 4000, 1000), limits = c(0, 4500)) +
theme_minimal(base_family = "Roboto Condensed") +
theme(panel.grid = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_line(),
axis.line.x = element_blank()) +
labs(
# title = "Size distribution public sites",
# subtitle = "Area by status",
y = "", x = ""
) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold")
)
plot_histogram
ggsave(filename = "fig_2b.pdf", plot = plot_histogram, dpi = 300, units = "mm", width = 220, height = 70)
# Figure 2x; histogram of public plot sizes
df <- read_csv("all_sites_areas.csv", na = "NULL") %>%
filter(area_ha > 0) %>%
filter(public == "public") %>%
mutate(bins = cut(area_ha, breaks = c(1e-4, 1e-3, 1e-2, 1e-1, 1, 10, 100, 1000, 10000, 1e10)))
plot_histogram <- df %>%
filter(!is.na(bins)) %>%
ggplot(aes(x = bins)) +
geom_histogram(stat = "count", fill = "grey", color = "black") +
scale_x_discrete(labels = c(expression ("0 - 10"~m^2),
expression ("10 - 100"~m^2),
expression ("100 - 1000"~m^2),
"0.1 - 1 Ha",
"1 - 10 Ha",
"10 - 100 Ha",
"100 - 1000 Ha",
"1000 - 10000 Ha",
"> 10.000 Ha")) +
scale_y_continuous(breaks = seq(0, 4000, 1000), limits = c(0, 4500)) +
theme_minimal(base_family = "Roboto Condensed") +
theme(panel.grid = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_line(),
axis.line.x = element_blank()) +
labs(
# title = "Size distribution public sites",
# subtitle = "Area by status",
y = "", x = ""
) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold")
)
plot_histogram
ggsave(filename = "fig_2b.pdf", plot = plot_histogram, dpi = 300, units = "mm", width = 220, height = 70)
# Figure 2x; summary per biome
df <- read_csv("biomes_region.csv", na = "NULL") %>%
group_by(biome) %>%
select(-region_name) %>%
summarise(across(everything(), sum)) %>%
filter(biome != "N/A")
pal <- colorRampPalette(brewer.pal(8, "PRGn"))
#  piechart
plot_pie <- df %>%
arrange(desc(count_public)) %>%
mutate(biome = paste0(biome,' [',round(100*count_public/sum(df$count_public),2),'%',']')) %>%
mutate(text_y = cumsum(count_public) - count_public/2) %>%
mutate(biome = fct_reorder(biome, count_public)) %>%
ggplot(aes(x = "", y = count_public, fill = biome)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start=0) +
theme_minimal(base_family = "Roboto Condensed") +
scale_fill_manual(values = pal(nrow(df)), guide = guide_legend(reverse = TRUE)) +
# geom_text_repel(aes(label = biome, y = text_y), nudge_x = 2, nudge_y = 2) +
# geom_label_repel(aes(y = text_y, label = biome), nudge_x = 1) +
theme(
panel.grid = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
legend.text  = element_text(size = 10),
# legend.position = "none"
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Proportion of sites per biome",
fill = "Biome"
# y = "Number of public sites", x = ""
)
plot_pie
ggsave(filename = "fig_2a.pdf", plot = plot_pie, dpi = 300, units = "mm", width = 220, height = 120)
# Figure 2x. metadata region
df <- read_csv("metadata_region.csv", na = "NULL")
# Bar charts
plot_bars <- df %>%
mutate(category = case_when(metadata == "pre_restoration" & category == "Grazing land" ~ " Grazing land",
metadata == "pre_restoration" & category == "Completed" ~ "NA",
TRUE ~ category)) %>%
group_by(metadata, category) %>%
summarise(count_public = sum(count_public, na.rm = TRUE), .groups = "keep") %>%
ungroup() %>%
# arrange(desc(count_public)) %>%
# # mutate(category = factor(category, levels = (.) %>% arrange(sum_public) %>% select(category) %>% distinct() %>% unlist())) %>%
mutate(
metadata = fct_relevel(metadata, "site_status", "pre_restoration", "intervention_type", "post_restoration"),
category = fct_reorder(category, count_public)
) %>%
filter(!is.na(category)) %>%
filter(count_public > 0) %>%
filter(category != "NA") %>%
ggplot(aes(x = category, y = count_public)) +
geom_segment(aes(x = category, xend = category, y = 0, yend = count_public, color = metadata)) +
geom_point(aes(color = metadata), size = 4, alpha = 0.6) +
theme_minimal(base_family = "Roboto Condensed") +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none"
) +
scale_y_continuous(expand = c(0.05, 0)) +
# facet_wrap(facets = vars(metadata), ncol = 1, scales = "free_y") +
facet_grid(rows = vars(metadata), scales = "free_y", switch = "y", space = "free_y", labeller = as_labeller(c(
"site_status" = "Site \nStatus",
"pre_restoration" = "Pre-restoration \nLand Use",
"intervention_type" = "Intervention Type",
"post_restoration" = "Post-restoration \nLand Cover"
))) +
labs(
# title = "Restor Public Sites",
# subtitle = "Number of sites",
y = "Number of sites", x = "") +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.y = element_text(angle = 270, face = "bold"),
strip.placement = "outside",
axis.title.x = element_text(margin = margin(t = 0.5, b = 0.5, unit = "cm")),
axis.title.y = element_blank(),
axis.text = element_text(size = 10),
legend.position = "none",
panel.grid.major.y = element_blank(),
)
plot_bars
ggsave(filename = "fig_2c.pdf", plot = plot_bars, dpi = 300, units = "mm", width = 140, height = 190)
json_npp <- tibble(fromJSON("geofiles/public-sites-productivity-redis-dump.json", flatten = TRUE)) %>%
unnest_wider(lines) %>%
select(siteId, xValues, yValues)
json_pet <- tibble(fromJSON("geofiles/public-sites-evapotranspiration-dump.json", flatten = TRUE)) %>%
unnest_wider(lines) %>%
select(siteId, xValues, yValues)
json_ndvi <- tibble(fromJSON("geofiles/public-sites-ndvi-redis-dump.json", flatten = TRUE)) %>%
unnest_wider(lines) %>%
select(siteId, xValues, yValues)
# NPP plot
npp <- json_npp %>% unnest(c(xValues, yValues)) %>% unnest(c(xValues, yValues)) %>%
rename(year = xValues, value = yValues) %>%
group_by(year) %>%
summarise(npp = sum(value)) %>%
mutate(npp = npp/1e6)
# PET plot
# pet <- json_pet %>% unnest(c(xValues, yValues)) %>% unnest(c(xValues, yValues)) %>%
#   rename(year = xValues, value = yValues) %>%
#   group_by(year) %>%
#   summarise(pet = sum(value)) %>%
#   mutate(pet = pet/1e6)
restor_areas_biomes <- read_csv("restor_biomes_areas.csv") %>%
select(-'.geo', -'system:index', -area_ha, -public) %>%
rename(biome = biomes, siteId = id) %>%
mutate(siteId = as.character(siteId))
pet <- json_pet %>% unnest(c(xValues, yValues)) %>%
unnest(c(xValues, yValues)) %>%
rename(year = xValues, value = yValues) %>%
left_join(., restor_areas_biomes, by = c("siteId" = "siteId")) %>%
mutate(value = value*area_m2) %>%
select(-biome) %>%
group_by(year) %>%
summarise(pet = sum(value,na.rm=T)) %>%
mutate(pet = pet/1e15)
# NDVI plot
ndvi <- json_ndvi %>%
rowwise() %>%
filter(length(unlist(xValues)) > 0) %>%
unnest(c(xValues, yValues)) %>% unnest(c(xValues, yValues)) %>%
rename(year = xValues, value = yValues) %>%
group_by(year) %>%
summarise(ndvi = mean(value))
# Combine data
df <- left_join(ndvi, pet, by = "year") %>% left_join(., npp, by = "year") %>%
rename('Mean NDVI' = ndvi,
'Total NPP (tonnes C)' = npp,
'Total ET (B tonnes H2O)' = pet) %>%
pivot_longer(-year)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
title = "Restor Public Sites",
subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 140, height = 190)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
title = "Restor Public Sites",
subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 140, height = 190)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
# Combine data
df <- left_join(ndvi, pet, by = "year") %>% left_join(., npp, by = "year") %>%
rename('Mean NDVI' = ndvi,
'Total NPP (tonnes C)' = npp,
'Total ET (tonnes H2O)' = pet) %>%
pivot_longer(-year)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 180)
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
plot_trends
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
plot_trends
# Plot plot
plot_trends <- df %>%
filter(year %in% c(2000:2020)) %>%
na.omit() %>%
ggplot(aes(x = year, y = value)) +
geom_point(aes(color = name)) +
geom_line(aes(color = name)) +
theme_minimal(base_family = "Roboto Condensed") +
scale_color_manual(values = c("#17630d", "#028ba6", "#a15c18")) +
facet_wrap(vars(name), scales = "free", nrow = 3) +
theme(
# plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 15, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12),
strip.placement = "outside",
legend.position = "none",
panel.grid = element_blank(),
axis.ticks = element_line()
) +
labs(
# title = "Restor Public Sites",
# subtitle = "Summary statistics for NDVI, Npp and PET",
y = "x 1E9", x = "")
plot_trends
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
n
ggsave(filename = "fig_1b.pdf", plot = plot_trends, dpi = 300, units = "mm", width = 90, height = 190)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
library(data.table)
library(tidyverse)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
library(data.table)
library(tidyverse)
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
setwd('/Users/johanvandenhoogen/SPUN/richness_maps/')
# Raw results have 10 predictions per point (pixel); one for each model in the ensemble. Process by taking the mean for each predicted point
df <- fread('/Users/johanvandenhoogen/SPUN/richness_maps/data/20220326_AMF_jackknife_results_envOnly.csv') %>%
mutate(ID = floor(V1/10)) %>% #add pseudo-ID per pixel
group_by(ID) %>%
mutate(across(c(predicted, AMF_diversity), ~ mean(.x, na.rm = TRUE))) %>% #change to summarise if only one record per sample is needed
mutate(abs_residual = abs(AMF_diversity - predicted))
